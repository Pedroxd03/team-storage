import os
import matplotlib.pyplot as plt
import pandas as pd
from scipy.signal import savgol_filter
from matplotlib.ticker import ScalarFormatter

def main():
    # Obtener la ruta del directorio del script
    script_path = os.path.dirname(os.path.abspath(__file__))

    # Obtener la lista de archivos CSV en el directorio
    csv_files = [f for f in os.listdir(script_path) if f.endswith("battery_data_sustrend_bank_2023-11-14_11-32-36.csv")]

    # Verificar si hay archivos CSV
    if not csv_files:
        print("No se encontraron archivos CSV en el directorio.")
        return

    # Seleccionar el archivo CSV más reciente según la hora de modificación
    latest_csv = max(csv_files, key=lambda x: os.path.getmtime(os.path.join(script_path, x)))

    # Especificar el archivo CSV a leer
    absolute_csv_path = os.path.join(script_path, latest_csv)

    # Leer el archivo CSV
    data_frame = pd.read_csv(absolute_csv_path)

    # Obtener el número de celdas dinámicamente
    N_CELLS = sum("Voltage" in col for col in data_frame.columns)

    # Definir colores para voltaje y temperatura
    voltage_colors = ['tab:purple', 'tab:red', 'tab:green', 'tab:red', 'tab:purple', 'tab:brown', 'tab:pink', 'tab:gray', 'tab:olive', 'tab:cyan']
    temperature_colors = ['tab:pink', 'tab:cyan', 'tab:gray', 'tab:pink', 'tab:brown', 'tab:purple', 'tab:red', 'tab:green', 'tab:orange', 'tab:blue']

    # Inicializar la figura para trazar
    fig, ax1 = plt.subplots(figsize=(10, 6))

    # Calcular intervalos de tiempo en segundos
    time_intervals = range(len(data_frame))

    # Convertir intervalos de tiempo a horas dividiendo por 3600
    hours = [t / 3600 for t in time_intervals]
    for cell_number in range(1, N_CELLS + 1):
        voltage_column = f"Cell {cell_number} Voltage"
        ax1.plot(hours, data_frame[voltage_column], label=f"{voltage_column} (V)", color=voltage_colors[cell_number - 1])

    # Configurar etiquetas y título para el eje izquierdo
    ax1.set_xlabel('Time (hours)')
    ax1.set_ylabel('Voltage (V)')
    ax1.set_title('Voltage and temperature for each cell')

    # Mover la leyenda del voltaje a la parte inferior izquierda del gráfico
    ax1.legend(loc='lower left', bbox_to_anchor=(0, -0.3), ncol=N_CELLS)

    # Crear un solo eje Y derecho para las temperaturas de ambas celdas
    ax2 = ax1.twinx()

    # Ajustar la posición del eje Y derecho
    ax2.spines['right'].set_position(('outward', 0))  # Ajusta según sea necesario

    # Ocultar los ticks del segundo eje Y para evitar superposiciones
    ax2.yaxis.set_visible(True)

    # Graficar la temperatura de la primera celda y segunda celda en el mismo eje Y derecho
    temperature_column_1 = f"Cell 1 Temp"
    temperature_smoothed_1 = savgol_filter(data_frame[temperature_column_1], window_length=90, polyorder=3)
    ax2.plot(hours, temperature_smoothed_1, linestyle='--', label=f"{temperature_column_1} (°C)", color=temperature_colors[0])

    temperature_column_2 = f"Cell 2 Temp"
    temperature_smoothed_2 = savgol_filter(data_frame[temperature_column_2], window_length=90, polyorder=3)
    ax2.plot(hours, temperature_smoothed_2, linestyle='--', label=f"{temperature_column_2} (°C)", color=temperature_colors[1])

    # Configurar etiquetas y título para el eje derecho
    ax2.set_ylabel('Temperature (°C)')
    ax2.yaxis.set_major_formatter(ScalarFormatter(useMathText=True, useOffset=False))
    ax2.ticklabel_format(axis='y', style='plain')

    # Mover la leyenda de temperaturas a la parte inferior derecha del gráfico
    ax2.legend(loc='lower right', bbox_to_anchor=(1, -0.3), ncol=N_CELLS * 2)

    # Ajustar diseño y guardar el gráfico como una imagen
    plt.tight_layout()
    plt.savefig(absolute_csv_path + "_voltage_smoothed_temperature_plot.png")

    # Mostrar el gráfico
    plt.show()

if __name__ == "__main__":
    main()    